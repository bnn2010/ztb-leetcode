class Solution {
public:
    vector<int> twoSum(vector<int> &numbers, int target) {
        vector<int> results;
        vector<int> index;
        for(int i=0;i<numbers.size();i++)
        {
            index.push_back(i);
        }
        quicksort(0,numbers.size()-1,numbers,&Solution::cmp,index);
        int i=0,j=numbers.size()-1;
        while(i<j)
        {
            if(numbers[index[i]]+numbers[index[j]]<target)
            {
                i++;
            }else if(numbers[index[i]]+numbers[index[j]]>target)
            {
                j--;
            }else if(numbers[index[i]]+numbers[index[j]]==target)
            {
                if(index[i]<index[j])
                {
                    results.push_back(index[i]+1);
                    results.push_back(index[j]+1);
                }else{
                    results.push_back(index[j]+1);
                    results.push_back(index[i]+1);
                }
                break;
            }
        }
        return results;
    }
    void quicksort(int start,int end,vector<int> &numbers,int cmp(int,int),vector<int> &index)
    {
        if(start>=end)return;
        int pivot=partition(numbers,start,end,index);
        quicksort(start,pivot-1,numbers,cmp,index);
        quicksort(pivot+1,end,numbers,cmp,index);
    }
    int partition(vector<int> &numbers,int low,int high,vector<int> &index)
    {
        
        //assert(low<high);
        int i=low;
        int j=low+1;
        int pivot_val=numbers[index[low]];
        for(;j<=high;j++)
        {
            if(cmp(numbers[index[j]],pivot_val)<=0)
            {
                i++;
                //SWITH
                if(i!=j){
                    int t=index[j];
                    index[j]=index[i];
                    index[i]=t;
                }
            }
        }
        //SWITH
        int t=index[low];
        index[low]=index[i];
        index[i]=t;
        return i;
    }
    static int cmp(int x,int y)
    {
        return x<y?-1:x==y?0:1;
    }
};
