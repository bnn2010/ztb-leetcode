*************************************************************************
问题描述：
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*************************************************************************

class Solution {
public:
     ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int carry = 0;
        ListNode *vhead = new ListNode(0);
        ListNode *pre = vhead;
        vhead->next = l1;
        while(l1 || l2){
            if(!l1){                                //l1为空，则新建val=0节点，但一定注意把节点链入表尾
                l1 = new ListNode(0);
                pre->next=l1;
            } 
            if(!l2){                                //因为返回的是l1,所以新建l2节点不用把节点链入表尾
                 l2 = new ListNode(0);
            }
            int temp = l1->val + l2->val + carry;
            l1->val = temp%10;
            carry = temp/10;
            
            pre = l1;
            l1 = l1->next;
            l2 = l2->next;
        }
        if (carry != 0){
             l1 = new ListNode(1);
             pre->next=l1;
        }
        return vhead->next;
    }
};
